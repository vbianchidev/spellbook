{
    "pipes": [
        {
            "name": "GroupByPipe",
            "id": "pipe-GroupByPipe-0461ff1f324fde2b11a17a43b53bc9b41d3030d95a2e6829cb48ce5a94907320c26fe0fd01f9de3cbc43c909aef6060efa34beabde336481f10cbfa633fb5f11",
            "file": "src/app/shared/pipes/group-by.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "list",
                            "type": "SpellEntity[] | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"level\" | \"alphabetic\" | \"element\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "AlphabeticGroup<SpellEntity>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "SpellEntity[] | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"level\" | \"alphabetic\" | \"element\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "groupBy",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { AlphabeticGroup } from '@core/rules';\nimport { SpellEntity } from 'src/app/modules/spell/store/spell.entity';\n\n@Pipe({\n  name: 'groupBy',\n})\nexport class GroupByPipe implements PipeTransform {\n  transform(\n    list: SpellEntity[] | null,\n    type?: 'level' | 'alphabetic' | 'element'\n  ): AlphabeticGroup<SpellEntity> {\n    if (!list) return {};\n    let data = list.reduce(\n      (result: AlphabeticGroup<SpellEntity>, element: SpellEntity) => {\n        let group = element.level.toString();\n\n        if (type && type === 'alphabetic') group = element.name[0];\n\n        if (type && type === 'element') group = element.type;\n\n        if (!result[group]) result[group] = [element];\n        else result[group].push(element);\n\n        return result;\n      },\n      {}\n    );\n    return data;\n  }\n}\n"
        },
        {
            "name": "IsCantripPipe",
            "id": "pipe-IsCantripPipe-17a3aedd7cb3396e5f6aac2291fdf4b607b94b54c91cdf0435409adfcd534269f30548673e3cae23320c18b0333422e3680446f3dd2f5b0e652f34ad4f215a5d",
            "file": "src/app/shared/pipes/is-cantrip.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "iscantrip",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'iscantrip',\n})\nexport class IsCantripPipe implements PipeTransform {\n  transform(value: number | string): string {\n    return value == 0 ? 'TRUQUE' : value.toString();\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AlphabeticGroup",
            "id": "interface-AlphabeticGroup-aab16a8238133b2aaeb45e6c82ac0239c3e821ae413dd1f54213967ca7b441af5cb1c2aacc669731364565f92484b6649a0766118cad9e6dfc2874413c066189",
            "file": "src/app/core/rules/core.rule.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IconDefinition } from '@fortawesome/fontawesome-svg-core';\n\nexport interface RPGIcon {\n  icon: IconDefinition;\n  color: string;\n}\n\nexport interface AlphabeticGroup<T> {\n  [key: string]: T[];\n}\n\nexport interface DictArray<T> {\n  key: string;\n  data: T[];\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-aab16a8238133b2aaeb45e6c82ac0239c3e821ae413dd1f54213967ca7b441af5cb1c2aacc669731364565f92484b6649a0766118cad9e6dfc2874413c066189",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T[]",
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "DictArray",
            "id": "interface-DictArray-aab16a8238133b2aaeb45e6c82ac0239c3e821ae413dd1f54213967ca7b441af5cb1c2aacc669731364565f92484b6649a0766118cad9e6dfc2874413c066189",
            "file": "src/app/core/rules/core.rule.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IconDefinition } from '@fortawesome/fontawesome-svg-core';\n\nexport interface RPGIcon {\n  icon: IconDefinition;\n  color: string;\n}\n\nexport interface AlphabeticGroup<T> {\n  [key: string]: T[];\n}\n\nexport interface DictArray<T> {\n  key: string;\n  data: T[];\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IconElement",
            "id": "interface-IconElement-f0480128d70ad2d245527faa891ab12e4f8bf052c844b54e1725a925dc6cc6f8f4c6d0b7aa4311e83fa530d121550621667c40fed258afa06373dfe665ae6684",
            "file": "src/app/shared/components/icon/icons.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  faBolt,\n  faBrain,\n  faCloudBolt,\n  faCut,\n  faDroplet,\n  faFire,\n  faFlask,\n  faGavel,\n  faPen,\n  faSkull,\n  faSnowflake,\n  faSun,\n  faWind,\n  IconDefinition,\n} from '@fortawesome/free-solid-svg-icons';\nimport { RPGMagicEffect } from 'src/app/core/rules/rpg.rule';\n\n\n\nexport interface IconElement {\n  icon: IconDefinition;\n  color: string;\n}\n\nconst IconsElements: Record<RPGMagicEffect, IconElement> = {\n  acid: {\n    color: '#53A548',\n    icon: faFlask,\n  },\n  cold: {\n    color: '#55C1FF',\n    icon: faSnowflake,\n  },\n  fire: {\n    color: '#EB5E28',\n    icon: faFire,\n  },\n  force: {\n    color: '#A4BFEB',\n    icon: faWind,\n  },\n  lightning: {\n    color: '#FFD23F',\n    icon: faBolt,\n  },\n  necrotic: {\n    color: '#370031',\n    icon: faSkull,\n  },\n  poison: {\n    color: '#53A548',\n    icon: faDroplet,\n  },\n  psychic: {\n    color: '#6320EE',\n    icon: faBrain,\n  },\n  radiant: {\n    color: '#FFD23F',\n    icon: faSun,\n  },\n  thunder: {\n    color: '#173753',\n    icon: faCloudBolt,\n  },\n\n  bludgeoning: {\n    color: '#FF312E',\n    icon: faGavel,\n  },\n  piercing: {\n    color: '#FF312E',\n    icon: faPen,\n  },\n  slashing: {\n    color: '#FF312E',\n    icon: faCut,\n  },\n};\n\nexport const Icons = {\n  elements: IconsElements,\n};\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RPGIcon",
            "id": "interface-RPGIcon-aab16a8238133b2aaeb45e6c82ac0239c3e821ae413dd1f54213967ca7b441af5cb1c2aacc669731364565f92484b6649a0766118cad9e6dfc2874413c066189",
            "file": "src/app/core/rules/core.rule.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IconDefinition } from '@fortawesome/fontawesome-svg-core';\n\nexport interface RPGIcon {\n  icon: IconDefinition;\n  color: string;\n}\n\nexport interface AlphabeticGroup<T> {\n  [key: string]: T[];\n}\n\nexport interface DictArray<T> {\n  key: string;\n  data: T[];\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconDefinition",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SpellEntity",
            "id": "interface-SpellEntity-bece6e44ef3f2d539e86770019963aa2d5ce050f973c8bf07813926465cb376c2ddf4760895e8d2e16c9657df656ca5f25ff1aa7f81eef1f87140fba74cb4fd8",
            "file": "src/app/modules/spell/store/spell.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { RPGMagicComponents, RPGMagicEffect, RPGMagicSchool } from 'src/app/core/rules/rpg.rule';\r\n\r\nexport interface SpellEntity {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  type: RPGMagicEffect;\r\n  level: number;\r\n  school: RPGMagicSchool;\r\n  castingTime: string;\r\n  range: string;\r\n  duration: string;\r\n  components: RPGMagicComponents[];\r\n}",
            "properties": [
                {
                    "name": "castingTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "components",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RPGMagicComponents[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "range",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "school",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RPGMagicSchool",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RPGMagicEffect",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StateModel",
            "id": "interface-StateModel-2c0f4c92e40214ea39660577ef44ac3ce55e9515f297fdceda1382931923687a94af51172dbd4e1f28f98738490dca69e65992d387306394f4771344ad5e0c2e",
            "file": "src/app/core/store/layout.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export namespace Layout {\n\n  export interface StateModel {\n    opened: boolean;\n    mobileMode?: boolean;\n  }\n\n  export class ToogleSidenav {\n    static readonly type = '[LAYOUT] Toogle Sidenav';\n  }\n\n  export class SetSidenav {\n    constructor(public opened: boolean) {}\n    static readonly type = '[LAYOUT] Set Sidenav';\n  }\n}\n",
            "properties": [
                {
                    "name": "mobileMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "opened",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StateModel",
            "id": "interface-StateModel-548167b8dcafa0b1ee404c287105db45ab4d3e3c25802f57ca5d071b4752b48da3342b6a6e957d03d4664f00e65b96388cf2a54a4730a0c96ad819aef2b46e4f-1",
            "file": "src/app/modules/spell/store/spell.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SpellEntity } from './spell.entity';\r\n\r\nexport namespace SpellActions {\r\n  export interface StateModel {\r\n    spells: SpellEntity[];\r\n    selectedSpell?: SpellEntity;\r\n  }\r\n\r\n  export class GetAll {\r\n    static readonly type = '[SPELL] Select all Spells';\r\n  }\r\n\r\n  export class Select {\r\n    constructor(public _id: number) {}\r\n    static readonly type = '[SPELL] Select a Spell';\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "selectedSpell",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpellEntity",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "spells",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpellEntity[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "StateModel-1"
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-461d6899ec67ad46e2811b3a6735e1d7565837f9d771baa815820a82b5d3721704d801e584e281b7df69767bb8f408d49030cfd34e003eea6b44cb1e8b446dc4",
            "file": "src/app/core/auth/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  public isAuthenticated(): boolean {\n    return true;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "BaseService",
            "id": "injectable-BaseService-d1bc6a338f67e84661fe5286ee1218aea9b621840a42479a5b5b7d7c7a5aa83cfb33c3427e22445281be82e8dc2f19b270527985eb8a1eeb42cbcd3034291691",
            "file": "src/app/core/services/base.service.ts",
            "properties": [
                {
                    "name": "_url",
                    "defaultValue": "environment.baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "endpoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        126,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "_data",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "_data",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getOne",
                    "args": [
                        {
                            "name": "_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_data",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_data",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseService<T> {\n  private readonly _url: string = environment.baseUrl;\n\n  public abstract readonly endpoint: string;\n\n  constructor(private _http: HttpClient) {}\n\n  public getAll(): Observable<T[]> {\n    return this._http.get<T[]>(`${this._url}/${this.endpoint}`);\n  }\n\n  public getOne(_id: string): Observable<T> {\n    return this._http.get<T>(`${this._url}/${this.endpoint}/${_id}`);\n  }\n\n  public create(_data: T): Observable<T> {\n    return this._http.post<T>(`${this._url}/${this.endpoint}`, _data);\n  }\n\n  public update(_id: string, _data: T): Observable<T> {\n    return this._http.patch<T>(`${this._url}/${this.endpoint}/${_id}`, _data);\n  }\n\n  public delete(_id: string): Observable<boolean> {\n    return this._http.delete<boolean>(`${this._url}/${this.endpoint}/${_id}`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BreakpointService",
            "id": "injectable-BreakpointService-db758a28a760a69101b824151d3bd69e8d1e4971180429b80c3324d1cd943b414e8b9ca5e34aa43848d2247d998e5311c98af606cef4c5b272f8f40779718142",
            "file": "src/app/core/services/breakpoint.service.ts",
            "properties": [
                {
                    "name": "breakpoint$",
                    "defaultValue": "this.breakpointObserver\n    .observe([Breakpoints.Handset])\n    .pipe(distinctUntilChanged())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { distinctUntilChanged } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  readonly breakpoint$ = this.breakpointObserver\n    .observe([Breakpoints.Handset])\n    .pipe(distinctUntilChanged());\n\n  constructor(private breakpointObserver: BreakpointObserver) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "EventsService",
            "id": "injectable-EventsService-2ba11926d229ab34edff6df6eb44ac7b7b8ef9f5e4cc62f1ebf614300857974f4128880d718b0366e1090c361518b57c3e4d911bc8fbe03fae8fdd14f693991c",
            "file": "src/app/core/services/events.service.ts",
            "properties": [
                {
                    "name": "emitters",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "nameEvent",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "EventEmitter<any>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "nameEvent",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { EventEmitter, Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventsService {\n  public static emitters: { [name: string]: EventEmitter<any> } = {};\n\n  public static get(nameEvent: string): EventEmitter<any> {\n    if (!this.emitters[nameEvent]) {\n      this.emitters[nameEvent] = new EventEmitter<any>();\n    }\n    return this.emitters[nameEvent];\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "LayoutState",
            "id": "injectable-LayoutState-014a176813d45dd62f1ec834adb0bf953c8ac57f009d571d402af1a113f8567069dcb4e93f6cbdc213f631e5d68a05a1226bdb41d6ba4e769a788b7b0a4b690f",
            "file": "src/app/core/store/layout.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "deviceMode",
                    "args": [
                        {
                            "type": "Layout.StateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "type": "Layout.StateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isOpened",
                    "args": [
                        {
                            "type": "Layout.StateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "type": "Layout.StateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOpened",
                    "args": [
                        {
                            "type": "StateContext<Layout.StateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "Layout.SetSidenav",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "Layout.SetSidenav"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<Layout.StateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "Layout.SetSidenav",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "type": "StateContext<Layout.StateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "Layout.ToogleSidenav"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<Layout.StateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\nimport { Layout } from './layout.actions';\n\n@State<Layout.StateModel>({\n  name: 'layout',\n  defaults: {\n    opened: false,\n    mobileMode: undefined\n  },\n})\n@Injectable()\nexport class LayoutState {\n  @Selector()\n  static isOpened({ opened }: Layout.StateModel): boolean {\n    return opened;\n  }\n\n  @Selector()\n  static deviceMode({ mobileMode }: Layout.StateModel): boolean {\n    return mobileMode as boolean;\n  }\n\n  @Action(Layout.ToogleSidenav)\n  public toggle({ getState, setState }: StateContext<Layout.StateModel>): void {\n    const state = getState();\n    setState({\n      ...state,\n      opened: !state.opened,\n    });\n  }\n\n  @Action(Layout.SetSidenav)\n  public setOpened(\n    { getState, setState }: StateContext<Layout.StateModel>,\n    { opened }: Layout.SetSidenav\n  ): void {\n    setState({\n      ...getState(),\n      opened: opened,\n      mobileMode: opened\n    });\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "SpellService",
            "id": "injectable-SpellService-974f4d426bdc57eaa6ec75bd18428c44fcae82b9a9637878dd96de8e94f4fc58d3dfe0f636c1729c1e620f7c8210f425a94a9929edd690951b87a6ade3332d11",
            "file": "src/app/modules/spell/providers/spell.service.ts",
            "properties": [
                {
                    "name": "endpoint",
                    "defaultValue": "'spell'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                },
                {
                    "name": "_url",
                    "defaultValue": "environment.baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121,
                        144
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "_data",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "_data",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                },
                {
                    "name": "getOne",
                    "args": [
                        {
                            "name": "_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_data",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_data",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BaseService } from 'src/app/core/services/base.service';\nimport { SpellContainerComponent } from '../spell-container.component';\nimport { SpellEntity } from '../store/spell.entity';\n\n@Injectable({\n  providedIn: SpellContainerComponent,\n})\nexport class SpellService extends BaseService<SpellEntity> {\n  public endpoint: string = 'spell';\n\n  constructor(private http: HttpClient) {\n    super(http);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "SpellState",
            "id": "injectable-SpellState-3197456b82304ea7af6c31884af5c1a77665e6b559f157e4c39e817dde6d7cbc829bf30e937ebb6d396620ebfe6be24bc9cc39896a1e77ec5108234c36fee786",
            "file": "src/app/modules/spell/store/spell.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAll",
                    "args": [
                        {
                            "type": "StateContext<SpellActions.StateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "SpellActions.GetAll"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<SpellActions.StateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedSpell",
                    "args": [
                        {
                            "type": "SpellActions.StateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SpellEntity",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "type": "SpellActions.StateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "spellList",
                    "args": [
                        {
                            "type": "SpellActions.StateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SpellEntity[]",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "type": "SpellActions.StateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { tap } from 'rxjs';\r\n\r\nimport { SpellService } from '../providers/spell.service';\r\nimport { SpellActions } from './spell.actions';\r\nimport { SpellEntity } from './spell.entity';\r\n\r\n@State<SpellActions.StateModel>({\r\n  name: 'spell',\r\n  defaults: {\r\n    spells: [],\r\n    selectedSpell: undefined\r\n  }\r\n})\r\n@Injectable()\r\nexport class SpellState {\r\n\r\n  @Selector()\r\n  static spellList({ spells }: SpellActions.StateModel): SpellEntity[] {\r\n    return spells;\r\n  }\r\n\r\n  @Selector()\r\n  static selectedSpell({ selectedSpell }: SpellActions.StateModel): SpellEntity {\r\n    return selectedSpell as SpellEntity;\r\n  }\r\n\r\n  constructor(private service: SpellService) {}\r\n\r\n  @Action(SpellActions.GetAll)\r\n  public getAll({ setState }: StateContext<SpellActions.StateModel>): void {\r\n    this.service.getAll()\r\n      .pipe(\r\n        tap(result => {\r\n          console.log(result)\r\n          setState({\r\n            spells: result,\r\n            selectedSpell: undefined\r\n          })\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "SpellService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "SpellService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-fafb43b36a0e48e8aa949bf38ae03c4af7c648ea0e341b91c8a633e2b8ca655c6d406f6ff888ae7ae1b9cdbd6f1f59000f587339b09724156ca5eec018e65d67",
            "file": "src/app/core/auth/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private _auth: AuthService, private _router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    if (!this._auth.isAuthenticated()) {\n      this._router.navigate(['login']);\n      return false;\n    }\n\n    console.log('Auth Guard success');\n    return true;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "_auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "SpellResolver",
            "id": "injectable-SpellResolver-4569e697928f65d29453a3bb4a6ef12d043a79726026a126e6edb2c9deb4444593e73a8a1517d65ec83d2703350b9556cecf2415abfca5206ef0ff6e4a30372a",
            "file": "src/app/modules/spell/providers/spell.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpellResolver implements Resolve<boolean> {\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return of(true);\n  }\n}\n",
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "EnsureModuleLoadedOnceGuard",
            "id": "class-EnsureModuleLoadedOnceGuard-a5b3e60fe51a667fc21e8b620ed979f342c93bdb685423234f8948d49adc3ddbfe95464afe1abfa53150f3fdbd662c316c28c3c3744673a4f22cdf32307af8f2",
            "file": "src/app/core/guards/ensure-module-loaded-once.guard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class EnsureModuleLoadedOnceGuard {\r\n  constructor(targetModule: any) {\r\n    if(targetModule) {\r\n      throw new Error(`${targetModule.constructor.name} has already been loaded. \r\n        Import Core modules in the AppModule only.`);\r\n    }\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "targetModule",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "targetModule",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetAll",
            "id": "class-GetAll-548167b8dcafa0b1ee404c287105db45ab4d3e3c25802f57ca5d071b4752b48da3342b6a6e957d03d4664f00e65b96388cf2a54a4730a0c96ad819aef2b46e4f",
            "file": "src/app/modules/spell/store/spell.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SpellEntity } from './spell.entity';\r\n\r\nexport namespace SpellActions {\r\n  export interface StateModel {\r\n    spells: SpellEntity[];\r\n    selectedSpell?: SpellEntity;\r\n  }\r\n\r\n  export class GetAll {\r\n    static readonly type = '[SPELL] Select all Spells';\r\n  }\r\n\r\n  export class Select {\r\n    constructor(public _id: number) {}\r\n    static readonly type = '[SPELL] Select a Spell';\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[SPELL] Select all Spells'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Select",
            "id": "class-Select-548167b8dcafa0b1ee404c287105db45ab4d3e3c25802f57ca5d071b4752b48da3342b6a6e957d03d4664f00e65b96388cf2a54a4730a0c96ad819aef2b46e4f",
            "file": "src/app/modules/spell/store/spell.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SpellEntity } from './spell.entity';\r\n\r\nexport namespace SpellActions {\r\n  export interface StateModel {\r\n    spells: SpellEntity[];\r\n    selectedSpell?: SpellEntity;\r\n  }\r\n\r\n  export class GetAll {\r\n    static readonly type = '[SPELL] Select all Spells';\r\n  }\r\n\r\n  export class Select {\r\n    constructor(public _id: number) {}\r\n    static readonly type = '[SPELL] Select a Spell';\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "_id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[SPELL] Select a Spell'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetSidenav",
            "id": "class-SetSidenav-2c0f4c92e40214ea39660577ef44ac3ce55e9515f297fdceda1382931923687a94af51172dbd4e1f28f98738490dca69e65992d387306394f4771344ad5e0c2e",
            "file": "src/app/core/store/layout.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export namespace Layout {\n\n  export interface StateModel {\n    opened: boolean;\n    mobileMode?: boolean;\n  }\n\n  export class ToogleSidenav {\n    static readonly type = '[LAYOUT] Toogle Sidenav';\n  }\n\n  export class SetSidenav {\n    constructor(public opened: boolean) {}\n    static readonly type = '[LAYOUT] Set Sidenav';\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "opened",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "opened",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "opened",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[LAYOUT] Set Sidenav'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ToogleSidenav",
            "id": "class-ToogleSidenav-2c0f4c92e40214ea39660577ef44ac3ce55e9515f297fdceda1382931923687a94af51172dbd4e1f28f98738490dca69e65992d387306394f4771344ad5e0c2e",
            "file": "src/app/core/store/layout.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export namespace Layout {\n\n  export interface StateModel {\n    opened: boolean;\n    mobileMode?: boolean;\n  }\n\n  export class ToogleSidenav {\n    static readonly type = '[LAYOUT] Toogle Sidenav';\n  }\n\n  export class SetSidenav {\n    constructor(public opened: boolean) {}\n    static readonly type = '[LAYOUT] Set Sidenav';\n  }\n}\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[LAYOUT] Toogle Sidenav'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-c3569e09a8d5e8d9140a31dbfeb6b08ee8e6b6596cf0df8f2ec542c97917558e1301a80244f2e31d7379105d11044a45019ca96f20371f8aa30c43f1263d00bb",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "template": "<router-outlet></router-outlet>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { Layout } from './core/store/layout.actions';\nimport { BreakpointService } from './core/services/breakpoint.service';\n\n@Component({\n  selector: 'app-root',\n  template: '<router-outlet></router-outlet>',\n})\nexport class AppComponent {\n  constructor(private _breakPoint: BreakpointService, private _store: Store) {\n    this._breakPoint.breakpoint$.subscribe((change) => {\n      this._store.dispatch(new Layout.SetSidenav(!change.matches));\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_breakPoint",
                        "type": "BreakpointService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_breakPoint",
                        "type": "BreakpointService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "BaseContainer",
            "id": "component-BaseContainer-4a337ec0d8b76a41005c0bd46d28e6ff267351106b228d0fce324a7b824c2ad9abf8f83bc5756ca4a58b8a79572c8dfab58f0f80cee935b652c30a1f2349896e",
            "file": "src/app/core/base/base.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_unsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unsubscribeAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Component({template: ''})\nexport abstract class BaseContainer implements OnDestroy { \n  private _unsubscribe: Subject<void> = new Subject();\n  get unsubscribe$(): Subject<void> { \n    return this._unsubscribe; \n  }\n  \n  ngOnDestroy(): void {\n    this.unsubscribeAction();\n  }\n\n  private unsubscribeAction(): void {\n    this._unsubscribe.next();\n    this._unsubscribe.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "unsubscribe$": {
                    "name": "unsubscribe$",
                    "getSignature": {
                        "name": "unsubscribe$",
                        "type": "",
                        "returnType": "Subject<void>",
                        "line": 8
                    }
                }
            }
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-fdd91f4872f88d615410cf316fd8ddb1ecf6328e9d60fccc8f3fa54094bdfa632f288203b0cac4542257cafd593ea3accf2637b6f668f50e5e8af55f9849e534",
            "file": "src/app/shared/components/card/card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spell",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "SpellEntity",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { MaterialModule } from '@shared/material/material.module';\r\nimport { PipesModule } from '@shared/pipes';\r\nimport { SpellEntity } from 'src/app/modules/spell/store/spell.entity';\r\n\r\nimport { IconComponent } from '../icon';\r\n\r\n@Component({\r\n  standalone: true,\r\n  selector: 'app-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.component.scss'],\r\n  imports: [\r\n    CommonModule,\r\n    FontAwesomeModule,\r\n    IconComponent,\r\n    PipesModule,\r\n    MaterialModule,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CardComponent {\r\n  @Input()\r\n  spell!: SpellEntity;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  row-gap: 24px;\n\n  mat-card {\n    border-radius: 16px;\n\n    mat-card-actions {\n      mat-chip-list{\n      display: flex;\n      justify-content: space-between;}\n    }\n\n    mat-card-header {\n      display: flex;\n      flex-direction: column;\n      margin-bottom: 16px;\n\n      h2 {\n        fa-icon {\n          margin-right: 16px;\n        }\n      }\n\n      div {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        flex-wrap: wrap;\n        row-gap: 8px;\n\n        span {\n          width: 50%;\n\n          @media screen and (max-width: 600px) {\n            width: 100%;\n          }\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-card>\n  <mat-card-header>\n    <h2><app-icon [element]=\"spell.type\"></app-icon> {{ spell.name }}</h2>\n    <div>\n      <span><strong>LEVEL: </strong>{{ spell.level | iscantrip }}</span>\n      <span><strong>CASTING TIME: </strong>{{ spell.castingTime }}</span>\n      <span><strong>DURATION: </strong>{{ spell.duration }}</span>\n      <span><strong>COMPONENTS: </strong>{{ spell.components }}</span>\n    </div>\n  </mat-card-header>\n</mat-card>\n"
        },
        {
            "name": "DashboardLayoutComponent",
            "id": "component-DashboardLayoutComponent-f6b4b0b2cc7cf8e889c27e0d685364dc87e3e500318b95c3bace368857db65a649f8566980ef829bd7f3d24eabfc6bc67704c9afc588a7ebc6f27a5d0a2bc4ff",
            "file": "src/app/core/layouts/dashboard-layout/dashboard-layout.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard-layout",
            "styleUrls": [
                "./dashboard-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isHandset$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "LayoutState.deviceMode"
                        }
                    ]
                },
                {
                    "name": "menuItems",
                    "defaultValue": "[\n    {name: 'logo', icon: faBook}\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "opened$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "LayoutState.isOpened"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { faBook, IconDefinition } from '@fortawesome/free-solid-svg-icons';\nimport { Select, Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { Layout } from 'src/app/core/store/layout.actions';\nimport { LayoutState } from 'src/app/core/store/layout.state';\n\n@Component({\n  selector: 'app-dashboard-layout',\n  templateUrl: './dashboard-layout.component.html',\n  styleUrls: ['./dashboard-layout.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DashboardLayoutComponent {\n  @Select(LayoutState.isOpened) \n  opened$!: Observable<boolean>;\n\n  @Select(LayoutState.deviceMode) \n  isHandset$!: Observable<boolean>;\n\n  menuItems: { name: string, icon: IconDefinition}[] = [\n    {name: 'logo', icon: faBook}\n  ]\n\n  constructor(private _store: Store) {}\n\n  toggle(): void {\n    this._store.dispatch(new Layout.ToogleSidenav());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  \r\n  mat-sidenav-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    height: 100%;\r\n    \r\n    mat-sidenav-content {\r\n      width: 100%;\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n\r\n      mat-toolbar {\r\n        width: 100%;\r\n        display: flex;\r\n        background-color: #303030;\r\n        min-height: 64px !important;\r\n      }\r\n\r\n      main {\r\n        width: calc(100% - 32px);\r\n        margin: 32px 0px;\r\n        background-color: #424242;\r\n        border-radius: 16px;\r\n      }\r\n    }\r\n    \r\n    mat-sidenav {\r\n      padding: 16px;\r\n      width: 20%;\r\n      min-width: 300px;\r\n    }\r\n  }\r\n}\r\n\r\n.open { margin-left: 32px !important; }",
                    "styleUrl": "./dashboard-layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-sidenav-container>\n  <mat-sidenav\n    [mode]=\"(isHandset$ | async) ? 'side' : 'over'\"\n    [opened]=\"opened$ | async\">\n    <mat-list role=\"list\">\n      <div class=\"subheader\" mat-subheader>Personagens</div>\n      <ng-container *ngFor=\"let item of menuItems\">\n        <mat-list-item [routerLink]=\"['/']\">\n          <mat-icon mat-list-icon>\n            <fa-icon [icon]=\"item.icon\"></fa-icon>\n          </mat-icon>\n          <div mat-line>{{ item.name }}</div>\n        </mat-list-item>\n      </ng-container>\n    </mat-list>\n  </mat-sidenav>\n\n  <mat-sidenav-content>\n    <mat-toolbar>\n      <button mat-icon-button (click)=\"toggle()\">\n        <mat-icon>menu</mat-icon>\n      </button>\n      <span><app-magic-text>SpellBook</app-magic-text></span>\n      <span class=\"flex-spacer\"></span>\n      <button mat-icon-button>\n        <mat-icon>book</mat-icon>\n      </button>\n      <button mat-icon-button>\n        <mat-icon>account_circle</mat-icon>\n      </button>\n    </mat-toolbar>\n\n    <main class=\"mat-elevation-z2\">\n      <router-outlet></router-outlet>\n    </main>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-0076debc97a7539474aaea4a510f8c9d71d2541ef0fb77197f272056e95e68b4d409e6e6f7f2b2eff72eef3ed2029d4637674a7ff7962240ef8d4ba079986a67",
            "file": "src/app/shared/components/icon/icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-icon",
            "styleUrls": [],
            "styles": [],
            "template": "<fa-icon\n  class=\"magic-color\"\n  [style.color]=\"'rgb(  0, 229, 255)'\"\n  [icon]=\"icon.icon\">\n</fa-icon>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "element",
                    "defaultValue": "'acid'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "RPGMagicEffect",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "icon",
                    "defaultValue": "{\n    color: '#000000',\n    icon: faQuestionCircle,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconElement",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\nimport { RPGMagicEffect } from 'src/app/core/rules/rpg.rule';\nimport { MagicTextComponent } from '../magic-text/magic-text.component';\nimport { IconElement, Icons } from './icons.interface';\n\n@Component({\n  standalone: true,\n  imports: [FontAwesomeModule, MagicTextComponent],\n  selector: 'app-icon',\n  template: `\n    <fa-icon\n      class=\"magic-color\"\n      [style.color]=\"'rgb(  0, 229, 255)'\"\n      [icon]=\"icon.icon\">\n    </fa-icon>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class IconComponent implements OnInit {\n  @Input()\n  element: RPGMagicEffect = 'acid';\n\n  icon: IconElement = {\n    color: '#000000',\n    icon: faQuestionCircle,\n  };\n\n  ngOnInit() {\n    this.icon = Icons.elements[this.element];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-1a037ccd710e8e89077b3139c257f80b1183055f285e63dfbd56c30162ed7ff8ddd16e8efd81a36f21d27c6fd274d07c929c0a281d34378ea4ea01645280a789",
            "file": "src/app/modules/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<p>login works!</p>\n"
        },
        {
            "name": "LoginLayoutComponent",
            "id": "component-LoginLayoutComponent-18623de813ec4a2ccb28284827cc97292ce3ccc406aae16b13fc8b4b99bc3b5f8ab1a298404d6fc0336ef6190bda550c416726a71becb957c017b845009c635a",
            "file": "src/app/core/layouts/login-layout/login-layout.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-layout",
            "styleUrls": [
                "./login-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-login-layout',\n  templateUrl: './login-layout.component.html',\n  styleUrls: ['./login-layout.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LoginLayoutComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login-layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "templateData": "<p>login-layout works!</p>\n"
        },
        {
            "name": "MagicTextComponent",
            "id": "component-MagicTextComponent-f0b1c4a1742dc97bae20aeaeef7e4c3a9a3510ad3df2a9df951eda2ba293d7bdfcef116d4a539bfb385b3b029299db04ef2ad606d264c61ade3e18ce3226e2bc",
            "file": "src/app/shared/components/magic-text/magic-text.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-magic-text",
            "styleUrls": [
                "./magic-text.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./magic-text.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "index",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "interval",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "animate",
                    "args": [
                        {
                            "name": "star",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "star",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "magic",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "rand",
                    "args": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostListener,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  standalone: true,\n  imports: [CommonModule],\n  selector: 'app-magic-text',\n  templateUrl: './magic-text.component.html',\n  styleUrls: ['./magic-text.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MagicTextComponent implements OnInit {\n  index = 0;\n  interval = 1;\n\n  constructor(private elem: ElementRef) {}\n\n  ngOnInit() {\n    this.magic();\n  }\n\n  @HostListener('click')\n  magic() {\n    for (const star of this.elem.nativeElement.querySelectorAll(\n      '.magic-star'\n    )) {\n      this.animate(star);\n    }\n  }\n\n  rand(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  animate(star: HTMLElement) {\n    star.style.setProperty('--star-left', `${this.rand(-10, 100)}%`);\n    star.style.setProperty('--star-top', `${this.rand(-40, 80)}%`);\n    star.style.animation = 'none';\n    star.offsetHeight;\n    star.style.animation = '';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": " \r\n$color-1: rgb( 41, 121, 255);\r\n$color-2: rgb(  0, 176, 255);\r\n$color-3: rgb(  0, 229, 255);\r\n$color-4: rgb( 29, 233, 182);\r\n\r\n\r\n@keyframes background-pan {\r\n  from { background-position: 0% center; }\r\n  to { background-position: -200% center; }\r\n}\r\n\r\n@keyframes scale {\r\n  from, to { transform: scale(0); }\r\n  50% { transform: scale(1); }\r\n}\r\n\r\n@keyframes rotate {\r\n  from { transform: rotate(0deg); }\r\n  to { transform: rotate(180deg); }\r\n}\r\n\r\nbody {\r\n  background-color: rgb(10, 10, 10);\r\n  display: grid;\r\n  height: 100vh;\r\n  margin: 0px;\r\n  overflow: hidden;\r\n  place-items: center;\r\n}\r\n\r\nh1 {\r\n  color: white;\r\n  font-size: 24px;\r\n  font-weight: 500;\r\n  margin: 0px;\r\n  padding: 20px;\r\n  text-align: center;\r\n\r\n  .magic {\r\n    display: inline-block;\r\n    position: relative;\r\n\r\n    .magic-star {\r\n      $size: 24px;\r\n      \r\n      animation: scale 700ms ease forwards;\r\n      display: block;\r\n      height: $size;\r\n      left: var(--star-left);\r\n      position: absolute;\r\n      top:var(--star-top);\r\n      width: $size;\r\n\r\n      svg {\r\n        animation: rotate 1000ms linear infinite;\r\n        display: block;\r\n        opacity: 0.7;\r\n\r\n        path {\r\n          fill: $color-3;\r\n        }\r\n      }\r\n    }\r\n\r\n    .magic-text {\r\n      animation: background-pan 4s linear infinite;\r\n      background: linear-gradient(\r\n        to right,\r\n        $color-1,\r\n        $color-3,\r\n        $color-2,\r\n        $color-1\r\n      );\r\n      background-size: 200%;\r\n      -webkit-background-clip: text;\r\n      -webkit-text-fill-color: transparent;\r\n      white-space: nowrap;\r\n    }\r\n  }\r\n}",
                    "styleUrl": "./magic-text.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elem",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "elem",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>\n  <span class=\"magic\">\n    <span class=\"magic-star\">\n      <svg viewBox=\"0 0 512 512\">\n        <path\n          d=\"M512 255.1c0 11.34-7.406 20.86-18.44 23.64l-171.3 42.78l-42.78 171.1C276.7 504.6 267.2 512 255.9 512s-20.84-7.406-23.62-18.44l-42.66-171.2L18.47 279.6C7.406 276.8 0 267.3 0 255.1c0-11.34 7.406-20.83 18.44-23.61l171.2-42.78l42.78-171.1C235.2 7.406 244.7 0 256 0s20.84 7.406 23.62 18.44l42.78 171.2l171.2 42.78C504.6 235.2 512 244.6 512 255.1z\" />\n      </svg>\n    </span>\n    <span class=\"magic-text\">\n      <ng-content></ng-content>\n    </span>\n  </span>\n</h1>\n"
        },
        {
            "name": "SpellContainerComponent",
            "id": "component-SpellContainerComponent-5b120bb69a2becf05e2211c81e994519ce9dac4b50df2ac7083de4baf29682be9f5bbad4e0e059b38261f0932bf802c4012535daf967053aa4966e23d8621a4c",
            "file": "src/app/modules/spell/spell-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<router-outlet></router-outlet>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_unsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseContainer"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseContainer"
                    }
                },
                {
                    "name": "unsubscribeAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseContainer"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { takeUntil } from 'rxjs';\r\nimport { BaseContainer } from 'src/app/core/base/base.component';\r\n\r\nimport { SpellActions } from './store/spell.actions';\r\n\r\n@Component({\r\n  template: `<router-outlet></router-outlet>`,\r\n})\r\nexport class SpellContainerComponent extends BaseContainer implements OnInit {\r\n  constructor(private _store: Store) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getAll();\r\n  }\r\n\r\n  public getAll(): void {\r\n    this._store\r\n      .dispatch(SpellActions.GetAll)\r\n      .pipe(takeUntil(this.unsubscribe$));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseContainer",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SpellDetailComponent",
            "id": "component-SpellDetailComponent-579ee0ab00a9638ccf2967a83f49e6c0cb03e1bbb8b068e86cb170345e5322c15fa1b02a2439cf2b19be27c1702ee63bcc7aaf6bf008c88012afe3e41f824ffd",
            "file": "src/app/modules/spell/views/spell-detail/spell-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-spell-detail",
            "styleUrls": [
                "./spell-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spell-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-spell-detail',\n  templateUrl: './spell-detail.component.html',\n  styleUrls: ['./spell-detail.component.scss']\n})\nexport class SpellDetailComponent {}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./spell-detail.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p>spell-detail works!</p>\n"
        },
        {
            "name": "SpellFormComponent",
            "id": "component-SpellFormComponent-b9c1a8c390ecd30a7c5fa2a546edccbac3e221c9817c68dfc8cb207eb57b88cf78345f96c843f8e58f143a2be2c71c43d8ef53102572a113443ce96dc0ba2104",
            "file": "src/app/modules/spell/views/spell-form/spell-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-spell-form",
            "styleUrls": [
                "./spell-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spell-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "spellList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SpellEntity[]>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "SpellState.spellList"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Select } from '@ngxs/store';\nimport { Observable } from 'rxjs';\n\nimport { SpellEntity } from '../../store/spell.entity';\nimport { SpellState } from '../../store/spell.state';\n\n@Component({\n  selector: 'app-spell-form',\n  templateUrl: './spell-form.component.html',\n  styleUrls: ['./spell-form.component.scss'],\n})\nexport class SpellFormComponent {\n  @Select(SpellState.spellList)\n  spellList$!: Observable<SpellEntity[]>;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./spell-form.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<h1>Luanzinho o bala</h1>\n\n<pre>\n  {{ spellList$ | async | json }}\n</pre>\n"
        },
        {
            "name": "SpellListComponent",
            "id": "component-SpellListComponent-c0d40a67307822a525fe6655188a1b2297e6192a4687724da8f9419ba0cbb9bcbe45cde2edd8e1d3b260231bac02d2c058fbd55c114f5f82bcd2c17760a377e4",
            "file": "src/app/modules/spell/views/spell-list/spell-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-spell-list",
            "styleUrls": [
                "./spell-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spell-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filter",
                    "defaultValue": "'level'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"level\" | \"alphabetic\" | \"element\"",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "spellList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SpellEntity[]>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "SpellState.spellList"
                        }
                    ]
                },
                {
                    "name": "spellsCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "visibleSpells",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DictArray<SpellEntity>[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "hasLoaded",
                    "args": [
                        {
                            "name": "data",
                            "type": "SpellEntity[] | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SpellEntity[] | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "iterableDictionary",
                    "args": [
                        {
                            "name": "dict",
                            "type": "AlphabeticGroup<SpellEntity>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DictArray[]",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dict",
                            "type": "AlphabeticGroup<SpellEntity>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { AlphabeticGroup, DictArray } from '@core/rules';\nimport { Select } from '@ngxs/store';\nimport { Observable } from 'rxjs';\n\nimport { SpellEntity } from '../../store/spell.entity';\nimport { SpellState } from '../../store/spell.state';\n\n@Component({\n  selector: 'app-spell-list',\n  templateUrl: './spell-list.component.html',\n  styleUrls: ['./spell-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SpellListComponent {\n  @Select(SpellState.spellList)\n  spellList$!: Observable<SpellEntity[]>;\n\n  spellsCount: number = 0;\n\n  visibleSpells: DictArray<SpellEntity>[] = [];\n\n  filter: 'level' | 'alphabetic' | 'element' = 'level';\n\n  iterableDictionary(\n    dict: AlphabeticGroup<SpellEntity>\n  ): DictArray<SpellEntity>[] {\n    let result: DictArray<SpellEntity>[] = [];\n    Object.entries(dict).forEach(([key, value]) => {\n      result.push({ key: key, data: value });\n    });\n    this.visibleSpells = result;\n    return result;\n  }\n\n  hasLoaded(data: SpellEntity[] | null): boolean {\n    if (data === null) return false;\n    if (data.length === 0) return false;\n    return true;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  flex: 1;\r\n  \r\n  mat-progress-bar {\r\n    margin: 0px 0px 16px 0px;\r\n  }\r\n\r\n  .title {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    margin: 16px;\r\n\r\n    h1 {\r\n      margin-bottom: 0;\r\n    }\r\n\r\n    .search {\r\n      display: flex;\r\n      align-items: stretch;\r\n      gap: 16px;\r\n      mat-form-field {\r\n        flex: auto;\r\n      }\r\n      button {\r\n        padding: 0px 16px;\r\n        height: 54px;\r\n        border-radius: 27px;\r\n      }\r\n    }\r\n    \r\n  }\r\n  mat-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 1;\r\n\r\n    .subheader {\r\n      width: 100%;\r\n      background-color: rgba(0,0,0,0.10);\r\n    }\r\n\r\n    mat-list-item {\r\n      border-bottom: 1px solid rgba(0,0,0,0.10);\r\n      width: 100%;\r\n    }\r\n  }\r\n}",
                    "styleUrl": "./spell-list.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"title\">\n  <div class=\"text\">\n    <h1>Spells</h1>\n    <span>99 spells</span>\n  </div>\n\n  <div class=\"search\">\n    <mat-button-toggle-group name=\"fontStyle\" aria-label=\"Font Style\">\n      <mat-button-toggle #level value=\"level\" (click)=\"filter = level.value\">\n        level\n      </mat-button-toggle>\n      <mat-button-toggle\n        #alphabetic\n        value=\"alphabetic\"\n        (click)=\"filter = alphabetic.value\">\n        alphabetic\n      </mat-button-toggle>\n      <mat-button-toggle\n        #element\n        value=\"element\"\n        (click)=\"filter = element.value\">\n        element\n      </mat-button-toggle>\n    </mat-button-toggle-group>\n  </div>\n</div>\n\n<div *ngIf=\"hasLoaded(spellList$ | async); then list; else loading\">\n  here is ignored\n</div>\n\n<ng-template #list>\n  <mat-list\n    *ngFor=\"\n      let item of iterableDictionary(spellList$ | async | groupBy: filter)\n    \">\n    <mat-toolbar color=\"accent\" mat-subheader>\n      {{ item.key | iscantrip | uppercase }}\n    </mat-toolbar>\n    <mat-list-item *ngFor=\"let spell of item.data\" matRipple>\n      <div mat-list-icon>\n        <app-icon [element]=\"spell.type\"></app-icon>\n      </div>\n      <div mat-line>{{ spell.name }}</div>\n      <div mat-line>{{ spell.duration }}</div>\n    </mat-list-item>\n  </mat-list>\n</ng-template>\n\n<ng-template #loading>\n  <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n</ng-template>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-772e875e1857b37d159bcd88763c82de237b7e818bef59909d7d81634c54fc341941fa5f85f69b655a3330de00c62f1bca3742ff6998095d3ab08e632e64bd22",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { NgxsReduxDevtoolsPluginModule } from '@ngxs/devtools-plugin';\nimport { NgxsModule } from '@ngxs/store';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CoreModule } from './core/core.module';\nimport { LayoutState } from './core/store/layout.state';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    FlexLayoutModule,\n    AppRoutingModule,\n    FontAwesomeModule,\n    BrowserAnimationsModule,\n    NgxsModule.forRoot([LayoutState]),\n    NgxsReduxDevtoolsPluginModule.forRoot(),\n    CoreModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-dd11ee0a8b47d020cddbc82daca36b99709366d9affb9e6719d8eb69fc3b0bb22eceab7a9242226f8a447505c646cc2358f15211e77e965e62e7c8d1235b894f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DashboardLayoutComponent } from '@layouts/dashboard-layout';\nimport { LoginLayoutComponent } from '@layouts/login-layout';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DashboardLayoutComponent,\n    children: [\n      {\n        path: '',\n        loadChildren: () =>\n          \"import('./modules/spell/spell.module').then(m => m.SpellModule)\",\n      },\n    ],\n  },\n  {\n    path: 'login',\n    component: LoginLayoutComponent,\n    loadChildren: () =>\n      \"import('./modules/login/login.module').then(m => m.LoginModule)\",\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComponentsModule",
            "id": "module-ComponentsModule-bfe283ab464305cf858ad9cd3df2ee7ce2c697be12e75766dcec53f793f33f95bdb3b2fb20e0cc3c640fb0f64231aba3915618115afcbc112be2850e778f965c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/components/components.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CardComponent } from './card';\nimport { IconComponent } from './icon';\nimport { MagicTextComponent } from './magic-text/magic-text.component';\n\n@NgModule({\n  imports: [CardComponent, IconComponent, MagicTextComponent],\n  exports: [CardComponent, IconComponent, MagicTextComponent],\n})\nexport class ComponentsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "IconComponent"
                        },
                        {
                            "name": "MagicTextComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "IconComponent"
                        },
                        {
                            "name": "MagicTextComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-e4624f76d64898a8dbcf34354eb14b3b321140f4a4d349690e2cd7834c5062db5addbdfe9527d02ecaac8f89dd1bef6f3548c352896eac9ac5d2c42afd185477",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { LayoutModule } from '@angular/cdk/layout';\nimport { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { EnsureModuleLoadedOnceGuard } from './guards/ensure-module-loaded-once.guard';\nimport { BreakpointService } from './services/breakpoint.service';\n\n@NgModule({\n  exports: [LayoutModule],\n  providers: [BreakpointService],\n})\nexport class CoreModule extends EnsureModuleLoadedOnceGuard {\n  constructor(@Optional() @SkipSelf() parentModule: CoreModule) {\n    super(parentModule);\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "BreakpointService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardLayoutModule",
            "id": "module-DashboardLayoutModule-206bb8badb180738df9c137b2679d9615a20384baf3788fa15fcc2b006e560fb5906f12695ff5dfeb219b27f5775ec6cc601f364b33ca6589514c4422a16a271",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/layouts/dashboard-layout/dashboard-layout.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { ComponentsModule } from '@shared/components/components.module';\nimport { MaterialModule } from '@shared/material/material.module';\n\nimport { DashboardLayoutComponent } from './dashboard-layout.component';\n\n@NgModule({\n  declarations: [DashboardLayoutComponent],\n  imports: [\n    CommonModule,\n    ComponentsModule,\n    RouterModule,\n    FontAwesomeModule,\n    MaterialModule,\n  ],\n  exports: [DashboardLayoutComponent],\n})\nexport class DashboardLayoutModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardLayoutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DashboardLayoutComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutsModule",
            "id": "module-LayoutsModule-dc743a27a5181aa805914738ddf99c0d1fe7c522daaecf917daeda12109b2bc44766381fe1f5f68c21dc12ca19603025228dd90eb5b987bb245653a6626c00fb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/layouts/layouts.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DashboardLayoutModule } from './dashboard-layout/dashboard-layout.module';\nimport { LoginLayoutModule } from './login-layout/login-layout.module';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    LoginLayoutModule\n  ],\n  exports: [\n    DashboardLayoutModule\n  ]\n})\nexport class LayoutsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LoginLayoutModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DashboardLayoutModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginLayoutModule",
            "id": "module-LoginLayoutModule-6f4db4835e57377c2bb54767271c09297efb3bdc96aca26701fe0d6cdf97bacce0d010b33c9be72ad2bd45908656fdfc104a92d5fd9b7a5144d475e909e29ddc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/layouts/login-layout/login-layout.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { LoginLayoutComponent } from './login-layout.component';\n\n\n\n@NgModule({\n  declarations: [LoginLayoutComponent],\n  imports: [\n    CommonModule\n  ]\n})\nexport class LoginLayoutModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginLayoutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginModule",
            "id": "module-LoginModule-ba8bb3e1663614fef6067bf489e169230ff1312a61db49e2a064c83041781fae1a2057b89d2841875cd120ebb6aa6a06a453972747e4381ce13e379c37e0d5c1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/login/login.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LoginRoutingModule } from './login-routing.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [CommonModule, LoginRoutingModule],\n})\nexport class LoginModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LoginRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginRoutingModule",
            "id": "module-LoginRoutingModule-266d4df47265a6ab5a1af3460b7da067563f13393c52ffbdfdf1a1981cb90621c4df99921e4132033dffc6dea30b5723c39d0e33822f17d3f861a0e72786866e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/login/login-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login.component';\n\nconst routes: Routes = [{ path: '', component: LoginComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "id": "module-MaterialModule-092e58a502217909ab43e24fc46078089dd0df55186fd03af202aa99bebacb700a4e0cacaffd454111f408762a156f3d1f872b8b8d06d31a71eabaf6f40ae7a5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/material/material.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\n\n@NgModule({\n  exports: [\n    MatCardModule,\n    MatListModule,\n    MatIconModule,\n    MatInputModule,\n    MatRippleModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatFormFieldModule,\n    MatProgressBarModule,\n    MatButtonToggleModule,\n  ],\n})\nexport class MaterialModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PipesModule",
            "id": "module-PipesModule-dcf1c04c53d823f24c5708222b5fd64c990ff32657261b717a4bc9749f92f74598e4b008c7d93651d82eaf1a5904a09ff5195e130f2bef927a68322a2a4fe648",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/pipes/pipes.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { GroupByPipe } from './group-by.pipe';\nimport { IsCantripPipe } from './is-cantrip.pipe';\n\n@NgModule({\n  declarations: [IsCantripPipe, GroupByPipe],\n  exports: [IsCantripPipe, GroupByPipe],\n})\nexport class PipesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GroupByPipe"
                        },
                        {
                            "name": "IsCantripPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GroupByPipe"
                        },
                        {
                            "name": "IsCantripPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-0c9496a04f4f83851fef94199101548ac84a4dad745d4b509bc194ce2a5ff6fd2f980203e3962e8b01dde8b9d30ee82850e0af0d5957ad3d62ba7c1032387648",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ComponentsModule } from '@components/components.module';\nimport { PipesModule } from '@shared/pipes/pipes.module';\nimport { MaterialModule } from './material/material.module';\n\n@NgModule({\n  exports: [PipesModule, ComponentsModule, MaterialModule],\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpellModule",
            "id": "module-SpellModule-1d703474a2b14ac231522ef1ed5a1bc35f2536c043620840e4e0ddd4caa55f938be0f2def4f9f88cb1412ae9d1041393e6240579614e9dcd999fec89412dde00",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/spell/spell.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgxsModule } from '@ngxs/store';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\nimport { SpellResolver } from './providers/spell.resolver';\nimport { SpellService } from './providers/spell.service';\nimport { SpellRoutingModule } from './spell-routing.module';\nimport { SpellState } from './store/spell.state';\nimport { SpellFormComponent } from './views/spell-form/spell-form.component';\n\n@NgModule({\n  declarations: [SpellRoutingModule.components, SpellFormComponent],\n  providers: [SpellService, SpellResolver],\n  imports: [\n    FormsModule,\n    CommonModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    NgxsModule.forFeature([SpellState]),\n\n    // My Imports\n    SpellRoutingModule,\n    SharedModule,\n  ],\n})\nexport class SpellModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "SpellService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpellFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "SpellRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpellRoutingModule",
            "id": "module-SpellRoutingModule-ac6b2206a379c2911387d97086a0ab20360330838805fda4c3965ab8eb987e7b8f9620270fe1f35e5e366252a01f9798258950f44dedd13c30c7ed9b15891692",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/spell/spell-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { SpellContainerComponent } from './spell-container.component';\nimport { SpellDetailComponent } from './views/spell-detail/spell-detail.component';\nimport { SpellFormComponent } from './views/spell-form/spell-form.component';\nimport { SpellListComponent } from './views/spell-list/spell-list.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SpellContainerComponent,\n    children: [\n      { path: '', component: SpellListComponent },\n      { path: 'spell/detail/:id', component: SpellDetailComponent },\n      { path: 'spell/create', component: SpellFormComponent },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SpellRoutingModule {\n  static components = [\n    SpellContainerComponent,\n    SpellListComponent,\n    SpellDetailComponent,\n  ];\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "acid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "bludgeoning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "cold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  baseUrl: 'http://localhost:3000',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n}"
            },
            {
                "name": "fire",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Fire",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "force",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Icons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/icon/icons.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  elements: IconsElements,\n}"
            },
            {
                "name": "IconsElements",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/icon/icons.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<RPGMagicEffect, IconElement>",
                "defaultValue": "{\n  acid: {\n    color: '#53A548',\n    icon: faFlask,\n  },\n  cold: {\n    color: '#55C1FF',\n    icon: faSnowflake,\n  },\n  fire: {\n    color: '#EB5E28',\n    icon: faFire,\n  },\n  force: {\n    color: '#A4BFEB',\n    icon: faWind,\n  },\n  lightning: {\n    color: '#FFD23F',\n    icon: faBolt,\n  },\n  necrotic: {\n    color: '#370031',\n    icon: faSkull,\n  },\n  poison: {\n    color: '#53A548',\n    icon: faDroplet,\n  },\n  psychic: {\n    color: '#6320EE',\n    icon: faBrain,\n  },\n  radiant: {\n    color: '#FFD23F',\n    icon: faSun,\n  },\n  thunder: {\n    color: '#173753',\n    icon: faCloudBolt,\n  },\n\n  bludgeoning: {\n    color: '#FF312E',\n    icon: faGavel,\n  },\n  piercing: {\n    color: '#FF312E',\n    icon: faPen,\n  },\n  slashing: {\n    color: '#FF312E',\n    icon: faCut,\n  },\n}"
            },
            {
                "name": "lightning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "necrotic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "piercing",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "poison",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "psychic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "radiant",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "slashing",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "spellMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SpellEntity",
                "defaultValue": "{\r\n  id: 0,\r\n  name: 'Mock Spell',\r\n  description: `\r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. \r\n    Nullam consequat, tortor vel eleifend volutpat, felis leo rhoncus nunc, a eleifend justo justo ac mauris. \r\n    Pellentesque commodo purus sed consectetur lacinia. \r\n    Aenean ornare quam quis imperdiet accumsan. \r\n    Sed rutrum, arcu quis scelerisque pellentesque, elit enim ultrices quam, sit amet tincidunt risus urna ut neque. \r\n    Mauris a ultrices justo. Aenean sit amet volutpat felis. \r\n    Sed pellentesque, augue eu euismod bibendum, nunc orci lobortis enim, vitae molestie magna nisi nec lacus. \r\n    Quisque iaculis posuere orci, sed fermentum arcu sollicitudin ut. \r\n    Suspendisse nulla mauris, euismod nec eros et, malesuada porta sem. \r\n    Vestibulum egestas at purus posuere scelerisque.`,\r\n  type: 'acid',\r\n  level: 0,\r\n  school: 'evocation',\r\n  castingTime: '1 Action',\r\n  range: '60 Feet',\r\n  duration: 'Instantaneous',\r\n  components: ['V', 'S'],\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CardComponent>",
                "defaultValue": "(args: CardComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<IconComponent>",
                "defaultValue": "(args: IconComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "thunder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/icons.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "RPGClass",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"artificer\" | \"barbarian\" | \"bard\" | \"cleric\" | \"druid\" | \"fighter\" | \"mage\" | \"monk\" | \"paladin\" | \"rogue\" | \"ranger\" | \"sorcerer\" | \"warlock\"",
                "file": "src/app/core/rules/rpg.rule.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "RPGCondition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"blinded\" | \"charmed\" | \"deafened\" | \"exhaustion\" | \"frightened\" | \"grappled\" | \"incapacitated\" | \"invisible\" | \"paralyzed\" | \"petrified\" | \"poisoned\" | \"prone\" | \"restrained\" | \"stunned\" | \"unconscious\"",
                "file": "src/app/core/rules/rpg.rule.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "RPGMagicalDamage",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"acid\" | \"cold\" | \"fire\" | \"force\" | \"lightning\" | \"necrotic\" | \"poison\" | \"psychic\" | \"radiant\" | \"thunder\"",
                "file": "src/app/core/rules/rpg.rule.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "RPGMagicComponents",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"V\" | \"S\" | \"M\"",
                "file": "src/app/core/rules/rpg.rule.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "RPGMagicEffect",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "RPGPhysicalDamage | RPGMagicalDamage",
                "file": "src/app/core/rules/rpg.rule.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "RPGMagicSchool",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"abjuration\" | \"transmutation\" | \"conjuration\" | \"divination\" | \"enchantment\" | \"evocation\" | \"illusion\" | \"necromancy\"",
                "file": "src/app/core/rules/rpg.rule.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "RPGPhysicalDamage",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"bludgeoning\" | \"piercing\" | \"slashing\"",
                "file": "src/app/core/rules/rpg.rule.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "RPGRace",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"dragonborn\" | \"dwarf\" | \"elf\" | \"gnome\" | \"half-elf\" | \"half-orc\" | \"halfling\" | \"human\" | \"tiefling\"",
                "file": "src/app/core/rules/rpg.rule.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/icons.stories.ts": [
                {
                    "name": "acid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "bludgeoning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "cold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "fire",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "force",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "lightning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "necrotic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "piercing",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "poison",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "psychic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "radiant",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "slashing",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<IconComponent>",
                    "defaultValue": "(args: IconComponent) => ({\r\n  props: args,\r\n})"
                },
                {
                    "name": "thunder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/icons.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  baseUrl: 'http://localhost:3000',\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n}"
                }
            ],
            "src/stories/card.stories.ts": [
                {
                    "name": "Fire",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "spellMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpellEntity",
                    "defaultValue": "{\r\n  id: 0,\r\n  name: 'Mock Spell',\r\n  description: `\r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. \r\n    Nullam consequat, tortor vel eleifend volutpat, felis leo rhoncus nunc, a eleifend justo justo ac mauris. \r\n    Pellentesque commodo purus sed consectetur lacinia. \r\n    Aenean ornare quam quis imperdiet accumsan. \r\n    Sed rutrum, arcu quis scelerisque pellentesque, elit enim ultrices quam, sit amet tincidunt risus urna ut neque. \r\n    Mauris a ultrices justo. Aenean sit amet volutpat felis. \r\n    Sed pellentesque, augue eu euismod bibendum, nunc orci lobortis enim, vitae molestie magna nisi nec lacus. \r\n    Quisque iaculis posuere orci, sed fermentum arcu sollicitudin ut. \r\n    Suspendisse nulla mauris, euismod nec eros et, malesuada porta sem. \r\n    Vestibulum egestas at purus posuere scelerisque.`,\r\n  type: 'acid',\r\n  level: 0,\r\n  school: 'evocation',\r\n  castingTime: '1 Action',\r\n  range: '60 Feet',\r\n  duration: 'Instantaneous',\r\n  components: ['V', 'S'],\r\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CardComponent>",
                    "defaultValue": "(args: CardComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/app/shared/components/icon/icons.interface.ts": [
                {
                    "name": "Icons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/icon/icons.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  elements: IconsElements,\n}"
                },
                {
                    "name": "IconsElements",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/icon/icons.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<RPGMagicEffect, IconElement>",
                    "defaultValue": "{\n  acid: {\n    color: '#53A548',\n    icon: faFlask,\n  },\n  cold: {\n    color: '#55C1FF',\n    icon: faSnowflake,\n  },\n  fire: {\n    color: '#EB5E28',\n    icon: faFire,\n  },\n  force: {\n    color: '#A4BFEB',\n    icon: faWind,\n  },\n  lightning: {\n    color: '#FFD23F',\n    icon: faBolt,\n  },\n  necrotic: {\n    color: '#370031',\n    icon: faSkull,\n  },\n  poison: {\n    color: '#53A548',\n    icon: faDroplet,\n  },\n  psychic: {\n    color: '#6320EE',\n    icon: faBrain,\n  },\n  radiant: {\n    color: '#FFD23F',\n    icon: faSun,\n  },\n  thunder: {\n    color: '#173753',\n    icon: faCloudBolt,\n  },\n\n  bludgeoning: {\n    color: '#FF312E',\n    icon: faGavel,\n  },\n  piercing: {\n    color: '#FF312E',\n    icon: faPen,\n  },\n  slashing: {\n    color: '#FF312E',\n    icon: faCut,\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/core/rules/rpg.rule.ts": [
                {
                    "name": "RPGClass",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"artificer\" | \"barbarian\" | \"bard\" | \"cleric\" | \"druid\" | \"fighter\" | \"mage\" | \"monk\" | \"paladin\" | \"rogue\" | \"ranger\" | \"sorcerer\" | \"warlock\"",
                    "file": "src/app/core/rules/rpg.rule.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "RPGCondition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"blinded\" | \"charmed\" | \"deafened\" | \"exhaustion\" | \"frightened\" | \"grappled\" | \"incapacitated\" | \"invisible\" | \"paralyzed\" | \"petrified\" | \"poisoned\" | \"prone\" | \"restrained\" | \"stunned\" | \"unconscious\"",
                    "file": "src/app/core/rules/rpg.rule.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "RPGMagicalDamage",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"acid\" | \"cold\" | \"fire\" | \"force\" | \"lightning\" | \"necrotic\" | \"poison\" | \"psychic\" | \"radiant\" | \"thunder\"",
                    "file": "src/app/core/rules/rpg.rule.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "RPGMagicComponents",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"V\" | \"S\" | \"M\"",
                    "file": "src/app/core/rules/rpg.rule.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "RPGMagicEffect",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "RPGPhysicalDamage | RPGMagicalDamage",
                    "file": "src/app/core/rules/rpg.rule.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "RPGMagicSchool",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"abjuration\" | \"transmutation\" | \"conjuration\" | \"divination\" | \"enchantment\" | \"evocation\" | \"illusion\" | \"necromancy\"",
                    "file": "src/app/core/rules/rpg.rule.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "RPGPhysicalDamage",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"bludgeoning\" | \"piercing\" | \"slashing\"",
                    "file": "src/app/core/rules/rpg.rule.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "RPGRace",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"dragonborn\" | \"dwarf\" | \"elf\" | \"gnome\" | \"half-elf\" | \"half-orc\" | \"halfling\" | \"human\" | \"tiefling\"",
                    "file": "src/app/core/rules/rpg.rule.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "DashboardLayoutComponent",
                        "children": [
                            {
                                "path": "",
                                "loadChildren": "./modules/spell/spell.module#SpellModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "src/app/modules/spell/spell-routing.module.ts",
                                                "module": "SpellRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "SpellContainerComponent",
                                                        "children": [
                                                            {
                                                                "path": "",
                                                                "component": "SpellListComponent"
                                                            },
                                                            {
                                                                "path": "spell/detail/:id",
                                                                "component": "SpellDetailComponent"
                                                            },
                                                            {
                                                                "path": "spell/create",
                                                                "component": "SpellFormComponent"
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "SpellModule"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "path": "login",
                        "component": "LoginLayoutComponent",
                        "loadChildren": "./modules/login/login.module#LoginModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/login/login-routing.module.ts",
                                        "module": "LoginRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "LoginComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "LoginModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/base/base.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseContainer",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/ensure-module-loaded-once.guard.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EnsureModuleLoadedOnceGuard",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/layouts/dashboard-layout/dashboard-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/layouts/login-layout/login-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/rules/core.rule.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AlphabeticGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/rules/core.rule.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DictArray",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/rules/core.rule.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RPGIcon",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/base.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BaseService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/breakpoint.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BreakpointService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/events.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EventsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/layout.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetSidenav",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/layout.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ToogleSidenav",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/layout.actions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StateModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/layout.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LayoutState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/spell/providers/spell.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "SpellResolver",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/spell/providers/spell.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SpellService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/spell/spell-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpellContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/spell/store/spell.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetAll",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/spell/store/spell.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Select",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/spell/store/spell.actions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StateModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/spell/store/spell.entity.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SpellEntity",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/spell/store/spell.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SpellState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/spell/views/spell-detail/spell-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpellDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/spell/views/spell-form/spell-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpellFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/spell/views/spell-list/spell-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpellListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icon/icons.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IconElement",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icon/icons.interface.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Icons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icon/icons.interface.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconsElements",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/magic-text/magic-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MagicTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/group-by.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GroupByPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/is-cantrip.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "IsCantripPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Fire",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "spellMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "acid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bludgeoning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fire",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "force",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lightning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "necrotic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "piercing",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "poison",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "psychic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "radiant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "slashing",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/icons.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "thunder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}